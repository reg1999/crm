<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <context id="mysql" defaultModelType="hierarchical"
             targetRuntime="MyBatis3Simple"> <!--自动识别数据库关键字，默认 false，如果设置为 true，根据 SqlReservedWords 中 定义的关键字列表；一般保留默认值，遇到数据库关键字（Java 关键字），使用 columnOverride 覆盖 -->
        <property name="autoDelimitKeywords" value="false"/> <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/> <!-- 格式化 Java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/> <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter"
                  value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/> <!-- beginningDelimiter 和 endingDelimiter：指明数据库的用于标记数据库对象名的 符号，比如 ORACLE 就是双引号，MYSQL 默认是`反引号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator> <!-- 必须要有的，使用这个配置链接数据库 @TODO:是否可以扩展 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql:///crm" userId="root"
                        password="root"></jdbcConnection> <!--Java 类型处理器，用于处理 DB 中的类型到 Java中的类型，默认使用 JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用 Integer，Long，Short 等来对应 DECIMAL 和 NUMERIC 数据类型 -->
        <javaTypeResolver
                type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"> <!--true：使用 BigDecimal 对应 DECIMAL 和 NUMERIC 数据类型 false：默认, scale > 0; length > 18：使用 BigDecimal; scale = 0; length [10,18]：使用 Long； scale = 0; length [5,9]：使用 Integer； scale = 0; length < 5：使用 Short -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver> <!--Java 模型创建器，是必须要的元素，负责：1，key 类（见 context 的 defaultModelType）；2，Java 类；3，查询类 targetPackage：生成的类要放的包，真实的包受 enableSubPackages 属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果 目录不存在，MBG 不会自动建目录 -->
        <javaModelGenerator targetPackage="com.hzg.ssm.domain"
                            targetProject="src/main/java"> <!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造 方法包含了所有的 field；而不是使用 setter -->
            <property name="constructorBased"
                      value="false"/> <!-- for MyBatis3/MyBatis3Simple 是否创建一个不可变的类，如果为 true， 那 么 MBG 会创建一个没有 setter 方法的类，取而代之的是类似 constructorBased 的类 -->
            <property name="immutable"
                      value="false"/> <!-- 设置是否在 getter 方法中，对 String 类型字段调用 trim() 方法 <property name="trimStrings" value="true" /> -->
        </javaModelGenerator> <!--生成 SQL Mapper XML 文件生成器，注意，在 MyBatis3 之后，我们可以使用 mapper.xml 文件 + Mapper接口（或者不用 mapper接口）， 或者只使用 Mapper 接口 + Annotation，所以，如果 javaClientGenerator 配置 中配置了需要生成 XML 的话， 这个元素就必须配置 targetPackage/targetProject，同 javaModelGenerator -->
        <sqlMapGenerator targetPackage="com.hzg.ssm.mapper"
                         targetProject="src/main/resources"> <!-- 在 targetPackage 的基础上，根据数据库的 schema 再生成一层 package，最 终生成的类放在这个 package 下，默认为 false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator> <!--对于 MyBatis 来说，即生成 Mapper 接口，注意，如果没有配置该元素，那么默认不会 生成 Mapper 接口，targetPackage/targetProject 同 javaModelGenerator type：选择怎么生成 Mapper 接口（在 MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用 Mapper 接口 + Annotation 的方式创建 （SQL 生成在 annotation 中），不会生成对应的 XML； 2，MIXEDMAPPER：使用混合配置，会生成 Mapper 接口，并适当添加合适的 Annotation，但是 XML 会生成在 XML 中； 3，XMLMAPPER：会生成 Mapper 接口，接口完全依赖 XML； 注意，如果 context 是 MyBatis3Simple：只支持 ANNOTATEDMAPPER 和 XMLMAPPER-->
        <javaClientGenerator targetPackage="com.hzg.ssm.mapper" type="XMLMAPPER"
                             targetProject="src/main/java"> <!-- 在 targetPackage 的基础上，根据数据库的 schema 再生成一层 package，最 终生成的类放在这个 package 下，默认为 false -->
            <property name="enableSubPackages"
                      value="true"/> <!-- 可以为所有生成的接口添加一个父接口，但是 MBG 只负责生成，不负责检查 <property name="rootInterface" value=""/> -->
        </javaClientGenerator> <!-- 配置表，根什么表生成 -->
        <table tableName="courseorder" domainObjectName="CourseOrder">
            <property name="useActualColumnNames" value="false"/><!--表示不直接使用字段名，会变成驼峰-->
            <property name="constructorBased" value="false"/>
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <!--<table tableName="systemdictionaryitem" domainObjectName="SystemDictionaryItem">
            <property name="useActualColumnNames" value="false"/>
            <property name="constructorBased" value="false"/>
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>-->
    </context>
</generatorConfiguration>